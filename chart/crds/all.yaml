# Source: crds/all-crds.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: apmservers.apm.k8s.elastic.co
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
spec:
  additionalPrinterColumns:
    - name: health
      type: string
      JSONPath: .status.health
    - name: nodes
      type: integer
      JSONPath: .status.availableNodes
      description: Available nodes
    - name: version
      type: string
      JSONPath: .spec.version
      description: APM version
    - name: age
      type: date
      JSONPath: .metadata.creationTimestamp
  group: apm.k8s.elastic.co
  names:
    kind: ApmServer
    categories:
      - elastic
    listKind: ApmServerList
    plural: apmservers
    shortNames:
      - apm
    singular: apmserver
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: ApmServer represents an APM Server resource in a Kubernetes cluster.
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          type: object
        spec:
          type: object
          description: ApmServerSpec holds the specification of an APM Server.
          properties:
            serviceAccountName:
              type: string
              description: ServiceAccountName is used to check access from the current
                resource to a resource (eg. Elasticsearch) in a different namespace.
                Can only be used if ECK is enforcing RBAC on references.
            image:
              type: string
              description: Image is the APM Server Docker image to deploy.
            config:
              type: object
              description: 'Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html'
            count:
              type: integer
              description: Count of APM Server instances to deploy.
              format: int32
            elasticsearchRef:
              type: object
              description: ElasticsearchRef is a reference to the output Elasticsearch
                cluster running in the same Kubernetes cluster.
              properties:
                name:
                  type: string
                  description: Name of the Kubernetes object.
                namespace:
                  type: string
                  description: Namespace of the Kubernetes object. If empty, defaults
                    to the current namespace.
              required:
                - name
            http:
              type: object
              description: HTTP holds the HTTP layer configuration for the APM Server
                resource.
              properties:
                service:
                  type: object
                  description: Service defines the template for the associated Kubernetes
                    Service object.
                  properties:
                    metadata:
                      type: object
                      description: ObjectMeta is the metadata of the service. The
                        name and namespace provided here are managed by ECK and will
                        be ignored.
                    spec:
                      type: object
                      description: Spec is the specification of the service.
                      properties:
                        type:
                          type: string
                          description: 'type determines how the Service is exposed.
                            Defaults to ClusterIP. Valid options are ExternalName,
                            ClusterIP, NodePort, and LoadBalancer. "ExternalName"
                            maps to the specified externalName. "ClusterIP" allocates
                            a cluster-internal IP address for load-balancing to endpoints.
                            Endpoints are determined by the selector or if that is
                            not specified, by manual construction of an Endpoints
                            object. If clusterIP is "None", no virtual IP is allocated
                            and the endpoints are published as a set of endpoints
                            rather than a stable IP. "NodePort" builds on ClusterIP
                            and allocates a port on every node which routes to the
                            clusterIP. "LoadBalancer" builds on NodePort and creates
                            an external load-balancer (if supported in the current
                            cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                        selector:
                          type: object
                          additionalProperties:
                            type: string
                          description: 'Route service traffic to pods with label keys
                            and values matching this selector. If empty or not present,
                            the service is assumed to have an external process managing
                            its endpoints, which Kubernetes will not modify. Only
                            applies to types ClusterIP, NodePort, and LoadBalancer.
                            Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                        ports:
                          type: array
                          description: 'The list of ports that are exposed by this
                            service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                          items:
                            type: object
                            description: ServicePort contains information on service's
                              port.
                            properties:
                              name:
                                type: string
                                description: The name of this port within the service.
                                  This must be a DNS_LABEL. All ports within a ServiceSpec
                                  must have unique names. When considering the endpoints
                                  for a Service, this must match the 'name' field
                                  in the EndpointPort. Optional if only one ServicePort
                                  is defined on this service.
                              protocol:
                                type: string
                                description: The IP protocol for this port. Supports
                                  "TCP", "UDP", and "SCTP". Default is TCP.
                              port:
                                type: integer
                                description: The port that will be exposed by this
                                  service.
                                format: int32
                              targetPort:
                                anyOf:
                                  - type: integer
                                  - type: string
                                description: 'Number or name of the port to access
                                  on the pods targeted by the service. Number must
                                  be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                  If this is a string, it will be looked up as a named
                                  port in the target Pod''s container ports. If this
                                  is not specified, the value of the ''port'' field
                                  is used (an identity map). This field is ignored
                                  for services with clusterIP=None, and should be
                                  omitted or set equal to the ''port'' field. More
                                  info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                              nodePort:
                                type: integer
                                description: 'The port on each node on which this
                                  service is exposed when type=NodePort or LoadBalancer.
                                  Usually assigned by the system. If specified, it
                                  will be allocated to the service if unused or else
                                  creation of the service will fail. Default is to
                                  auto-allocate a port if the ServiceType of this
                                  Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                format: int32
                            required:
                              - port
                        clusterIP:
                          type: string
                          description: 'clusterIP is the IP address of the service
                            and is usually assigned randomly by the master. If an
                            address is specified manually and is not in use by others,
                            it will be allocated to the service; otherwise, creation
                            of the service will fail. This field can not be changed
                            through updates. Valid values are "None", empty string
                            (""), or a valid IP address. "None" can be specified for
                            headless services when proxying is not required. Only
                            applies to types ClusterIP, NodePort, and LoadBalancer.
                            Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                        externalIPs:
                          type: array
                          description: externalIPs is a list of IP addresses for which
                            nodes in the cluster will also accept traffic for this
                            service.  These IPs are not managed by Kubernetes.  The
                            user is responsible for ensuring that traffic arrives
                            at a node with this IP.  A common example is external
                            load-balancers that are not part of the Kubernetes system.
                          items:
                            type: string
                        loadBalancerIP:
                          type: string
                          description: 'Only applies to Service Type: LoadBalancer
                            LoadBalancer will get created with the IP specified in
                            this field. This feature depends on whether the underlying
                            cloud-provider supports specifying the loadBalancerIP
                            when a load balancer is created. This field will be ignored
                            if the cloud-provider does not support the feature.'
                        loadBalancerSourceRanges:
                          type: array
                          description: 'If specified and supported by the platform,
                            this will restrict traffic through the cloud-provider
                            load-balancer will be restricted to the specified client
                            IPs. This field will be ignored if the cloud-provider
                            does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                          items:
                            type: string
                        externalName:
                          type: string
                          description: externalName is the external reference that
                            kubedns or equivalent will return as a CNAME record for
                            this service. No proxying will be involved. Must be a
                            valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123)
                            and requires Type to be ExternalName.
                        externalTrafficPolicy:
                          type: string
                          description: externalTrafficPolicy denotes if this Service
                            desires to route external traffic to node-local or cluster-wide
                            endpoints. "Local" preserves the client source IP and
                            avoids a second hop for LoadBalancer and Nodeport type
                            services, but risks potentially imbalanced traffic spreading.
                            "Cluster" obscures the client source IP and may cause
                            a second hop to another node, but should have good overall
                            load-spreading.
                        sessionAffinity:
                          type: string
                          description: 'Supports "ClientIP" and "None". Used to maintain
                            session affinity. Enable client IP based session affinity.
                            Must be ClientIP or None. Defaults to None. More info:
                            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                        healthCheckNodePort:
                          type: integer
                          description: healthCheckNodePort specifies the healthcheck
                            nodePort for the service. If not specified, HealthCheckNodePort
                            is created by the service api backend with the allocated
                            nodePort. Will use user-specified nodePort value if specified
                            by the client. Only effects when Type is set to LoadBalancer
                            and ExternalTrafficPolicy is set to Local.
                          format: int32
                        ipFamily:
                          type: string
                          description: ipFamily specifies whether this Service has
                            a preference for a particular IP family (e.g. IPv4 vs.
                            IPv6).  If a specific IP family is requested, the clusterIP
                            field will be allocated from that family, if it is available
                            in the cluster.  If no IP family is requested, the cluster's
                            primary IP family will be used. Other IP fields (loadBalancerIP,
                            loadBalancerSourceRanges, externalIPs) and controllers
                            which allocate external load-balancers should use the
                            same IP family.  Endpoints for this Service will be of
                            this family.  This field is immutable after creation.
                            Assigning a ServiceIPFamily not available in the cluster
                            (e.g. IPv6 in IPv4 only cluster) is an error condition
                            and will fail during clusterIP assignment.
                        publishNotReadyAddresses:
                          type: boolean
                          description: publishNotReadyAddresses, when set to true,
                            indicates that DNS implementations must publish the notReadyAddresses
                            of subsets for the Endpoints associated with the Service.
                            The default value is false. The primary use case for setting
                            this field is to use a StatefulSet's Headless Service
                            to propagate SRV records for its Pods without respect
                            to their readiness for purpose of peer discovery.
                        sessionAffinityConfig:
                          type: object
                          description: sessionAffinityConfig contains the configurations
                            of session affinity.
                          properties:
                            clientIP:
                              type: object
                              description: clientIP contains the configurations of
                                Client IP based session affinity.
                              properties:
                                timeoutSeconds:
                                  type: integer
                                  description: timeoutSeconds specifies the seconds
                                    of ClientIP type session sticky time. The value
                                    must be >0 && <=86400(for 1 day) if ServiceAffinity
                                    == "ClientIP". Default value is 10800(for 3 hours).
                                  format: int32
                        topologyKeys:
                          type: array
                          description: topologyKeys is a preference-order list of
                            topology keys which implementations of services should
                            use to preferentially sort endpoints when accessing this
                            Service, it can not be used at the same time as externalTrafficPolicy=Local.
                            Topology keys must be valid label keys and at most 16
                            keys may be specified. Endpoints are chosen based on the
                            first topology key with available backends. If this field
                            is specified and all entries have no backends that match
                            the topology of the client, the service has no backends
                            for that client and connections should fail. The special
                            value "*" may be used to mean "any topology". This catch-all
                            value, if used, only makes sense as the last value in
                            the list. If this is not specified or empty, no topology
                            constraints will be applied.
                          items:
                            type: string
                tls:
                  type: object
                  description: TLS defines options for configuring TLS for HTTP.
                  properties:
                    certificate:
                      type: object
                      description: "Certificate is a reference to a Kubernetes secret
                        that contains the certificate and private key for enabling
                        TLS. The referenced secret should contain the following: \n
                        - `ca.crt`: The certificate authority (optional). - `tls.crt`:
                        The certificate (or a chain). - `tls.key`: The private key
                        to the first certificate in the certificate chain."
                      properties:
                        secretName:
                          type: string
                          description: SecretName is the name of the secret.
                    selfSignedCertificate:
                      type: object
                      description: SelfSignedCertificate allows configuring the self-signed
                        certificate generated by the operator.
                      properties:
                        disabled:
                          type: boolean
                          description: Disabled indicates that the provisioning of
                            the self-signed certifcate should be disabled.
                        subjectAltNames:
                          type: array
                          description: SubjectAlternativeNames is a list of SANs to
                            include in the generated HTTP TLS certificate.
                          items:
                            type: object
                            description: SubjectAlternativeName represents a SAN entry
                              in a x509 certificate.
                            properties:
                              dns:
                                type: string
                                description: DNS is the DNS name of the subject.
                              ip:
                                type: string
                                description: IP is the IP address of the subject.
            kibanaRef:
              type: object
              description: KibanaRef is a reference to a Kibana instance running in
                the same Kubernetes cluster. It allows APM agent central configuration
                management in Kibana.
              properties:
                name:
                  type: string
                  description: Name of the Kubernetes object.
                namespace:
                  type: string
                  description: Namespace of the Kubernetes object. If empty, defaults
                    to the current namespace.
              required:
                - name
            podTemplate:
              type: object
              description: PodTemplate provides customisation options (labels, annotations,
                affinity rules, resource requests, and so on) for the APM Server pods.
            secureSettings:
              type: array
              description: SecureSettings is a list of references to Kubernetes secrets
                containing sensitive configuration options for APM Server.
              items:
                type: object
                description: SecretSource defines a data source based on a Kubernetes
                  Secret.
                properties:
                  entries:
                    type: array
                    description: Entries define how to project each key-value pair
                      in the secret to filesystem paths. If not defined, all keys
                      will be projected to similarly named paths in the filesystem.
                      If defined, only the specified keys will be projected to the
                      corresponding paths.
                    items:
                      type: object
                      description: KeyToPath defines how to map a key in a Secret
                        object to a filesystem path.
                      properties:
                        key:
                          type: string
                          description: Key is the key contained in the secret.
                        path:
                          type: string
                          description: Path is the relative file path to map the key
                            to. Path must not be an absolute file path and must not
                            contain any ".." components.
                      required:
                        - key
                  secretName:
                    type: string
                    description: SecretName is the name of the secret.
                required:
                  - secretName
            version:
              type: string
              description: Version of the APM Server.
          required:
            - version
        status:
          type: object
          description: ApmServerStatus defines the observed state of ApmServer
          properties:
            service:
              type: string
              description: ExternalService is the name of the service the agents should
                connect to.
            availableNodes:
              type: integer
              format: int32
            elasticsearchAssociationStatus:
              type: string
              description: ElasticsearchAssociationStatus is the status of any auto-linking
                to Elasticsearch clusters.
            health:
              type: string
              description: ApmServerHealth expresses the status of the Apm Server
                instances.
            kibanaAssociationStatus:
              type: string
              description: KibanaAssociationStatus is the status of any auto-linking
                to Kibana.
            secretTokenSecret:
              type: string
              description: SecretTokenSecretName is the name of the Secret that contains
                the secret token
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
    - name: v1beta1
      served: true
      storage: false
    - name: v1alpha1
      served: false
      storage: false
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: beats.beat.k8s.elastic.co
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
spec:
  additionalPrinterColumns:
    - name: health
      type: string
      JSONPath: .status.health
    - name: available
      type: integer
      JSONPath: .status.availableNodes
      description: Available nodes
    - name: expected
      type: integer
      JSONPath: .status.expectedNodes
      description: Expected nodes
    - name: type
      type: string
      JSONPath: .spec.type
      description: Beat type
    - name: version
      type: string
      JSONPath: .spec.version
      description: Beat version
    - name: age
      type: date
      JSONPath: .metadata.creationTimestamp
  group: beat.k8s.elastic.co
  names:
    kind: Beat
    categories:
      - elastic
    listKind: BeatList
    plural: beats
    shortNames:
      - beat
    singular: beat
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: Beat is the Schema for the Beats API.
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          type: object
        spec:
          type: object
          description: BeatSpec defines the desired state of a Beat.
          properties:
            type:
              type: string
              description: Type is the type of the Beat to deploy (filebeat, metricbeat,
                heartbeat, auditbeat, journalbeat, packetbeat, etc.). Any string can
                be used, but well-known types will have the image field defaulted
                and have the appropriate Elasticsearch roles created automatically.
                It also allows for dashboard setup when combined with a `KibanaRef`.
              maxLength: 20
              pattern: '[a-zA-Z0-9-]+'
            serviceAccountName:
              type: string
              description: ServiceAccountName is used to check access from the current
                resource to Elasticsearch resource in a different namespace. Can only
                be used if ECK is enforcing RBAC on references.
            image:
              type: string
              description: Image is the Beat Docker image to deploy. Version and Type
                have to match the Beat in the image.
            config:
              type: object
              description: Config holds the Beat configuration. At most one of [`Config`,
                `ConfigRef`] can be specified.
            configRef:
              type: object
              description: ConfigRef contains a reference to an existing Kubernetes
                Secret holding the Beat configuration. Beat settings must be specified
                as yaml, under a single "beat.yml" entry. At most one of [`Config`,
                `ConfigRef`] can be specified.
              properties:
                secretName:
                  type: string
                  description: SecretName is the name of the secret.
            daemonSet:
              type: object
              description: DaemonSet specifies the Beat should be deployed as a DaemonSet,
                and allows providing its spec. Cannot be used along with `deployment`.
                If both are absent a default for the Type is used.
              properties: {}
            deployment:
              type: object
              description: Deployment specifies the Beat should be deployed as a Deployment,
                and allows providing its spec. Cannot be used along with `daemonSet`.
                If both are absent a default for the Type is used.
              properties:
                replicas:
                  type: integer
                  format: int32
            elasticsearchRef:
              type: object
              description: ElasticsearchRef is a reference to an Elasticsearch cluster
                running in the same Kubernetes cluster.
              properties:
                name:
                  type: string
                  description: Name of the Kubernetes object.
                namespace:
                  type: string
                  description: Namespace of the Kubernetes object. If empty, defaults
                    to the current namespace.
              required:
                - name
            kibanaRef:
              type: object
              description: KibanaRef is a reference to a Kibana instance running in
                the same Kubernetes cluster. It allows automatic setup of dashboards
                and visualizations.
              properties:
                name:
                  type: string
                  description: Name of the Kubernetes object.
                namespace:
                  type: string
                  description: Namespace of the Kubernetes object. If empty, defaults
                    to the current namespace.
              required:
                - name
            secureSettings:
              type: array
              description: SecureSettings is a list of references to Kubernetes Secrets
                containing sensitive configuration options for the Beat. Secrets data
                can be then referenced in the Beat config using the Secret's keys
                or as specified in `Entries` field of each SecureSetting.
              items:
                type: object
                description: SecretSource defines a data source based on a Kubernetes
                  Secret.
                properties:
                  entries:
                    type: array
                    description: Entries define how to project each key-value pair
                      in the secret to filesystem paths. If not defined, all keys
                      will be projected to similarly named paths in the filesystem.
                      If defined, only the specified keys will be projected to the
                      corresponding paths.
                    items:
                      type: object
                      description: KeyToPath defines how to map a key in a Secret
                        object to a filesystem path.
                      properties:
                        key:
                          type: string
                          description: Key is the key contained in the secret.
                        path:
                          type: string
                          description: Path is the relative file path to map the key
                            to. Path must not be an absolute file path and must not
                            contain any ".." components.
                      required:
                        - key
                  secretName:
                    type: string
                    description: SecretName is the name of the secret.
                required:
                  - secretName
            version:
              type: string
              description: Version of the Beat.
          required:
            - type
            - version
        status:
          type: object
          description: BeatStatus defines the observed state of a Beat.
          properties:
            availableNodes:
              type: integer
              format: int32
            elasticsearchAssociationStatus:
              type: string
              description: AssociationStatus is the status of an association resource.
            expectedNodes:
              type: integer
              format: int32
            health:
              type: string
            kibanaAssociationStatus:
              type: string
              description: AssociationStatus is the status of an association resource.
  version: v1beta1
  versions:
    - name: v1beta1
      served: true
      storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: elasticsearches.elasticsearch.k8s.elastic.co
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
spec:
  additionalPrinterColumns:
    - name: health
      type: string
      JSONPath: .status.health
    - name: nodes
      type: integer
      JSONPath: .status.availableNodes
      description: Available nodes
    - name: version
      type: string
      JSONPath: .spec.version
      description: Elasticsearch version
    - name: phase
      type: string
      JSONPath: .status.phase
    - name: age
      type: date
      JSONPath: .metadata.creationTimestamp
  group: elasticsearch.k8s.elastic.co
  names:
    kind: Elasticsearch
    categories:
      - elastic
    listKind: ElasticsearchList
    plural: elasticsearches
    shortNames:
      - es
    singular: elasticsearch
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: Elasticsearch represents an Elasticsearch resource in a Kubernetes
        cluster.
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          type: object
        spec:
          type: object
          description: ElasticsearchSpec holds the specification of an Elasticsearch
            cluster.
          properties:
            updateStrategy:
              type: object
              description: UpdateStrategy specifies how updates to the cluster should
                be performed.
              properties:
                changeBudget:
                  type: object
                  description: ChangeBudget defines the constraints to consider when
                    applying changes to the Elasticsearch cluster.
                  properties:
                    maxSurge:
                      type: integer
                      description: MaxSurge is the maximum number of new pods that
                        can be created exceeding the original number of pods defined
                        in the specification. MaxSurge is only taken into consideration
                        when scaling up. Setting a negative value will disable the
                        restriction. Defaults to unbounded if not specified.
                      format: int32
                    maxUnavailable:
                      type: integer
                      description: MaxUnavailable is the maximum number of pods that
                        can be unavailable (not ready) during the update due to circumstances
                        under the control of the operator. Setting a negative value
                        will disable this restriction. Defaults to 1 if not specified.
                      format: int32
            serviceAccountName:
              type: string
              description: ServiceAccountName is used to check access from the current
                resource to a resource (eg. a remote Elasticsearch cluster) in a different
                namespace. Can only be used if ECK is enforcing RBAC on references.
            image:
              type: string
              description: Image is the Elasticsearch Docker image to deploy.
            auth:
              type: object
              description: Auth contains user authentication and authorization security
                settings for Elasticsearch.
              properties:
                fileRealm:
                  type: array
                  description: FileRealm to propagate to the Elasticsearch cluster.
                  items:
                    type: object
                    description: FileRealmSource references users to create in the
                      Elasticsearch cluster.
                    properties:
                      secretName:
                        type: string
                        description: SecretName is the name of the secret.
                roles:
                  type: array
                  description: Roles to propagate to the Elasticsearch cluster.
                  items:
                    type: object
                    description: RoleSource references roles to create in the Elasticsearch
                      cluster.
                    properties:
                      secretName:
                        type: string
                        description: SecretName is the name of the secret.
            http:
              type: object
              description: HTTP holds HTTP layer settings for Elasticsearch.
              properties:
                service:
                  type: object
                  description: Service defines the template for the associated Kubernetes
                    Service object.
                  properties:
                    metadata:
                      type: object
                      description: ObjectMeta is the metadata of the service. The
                        name and namespace provided here are managed by ECK and will
                        be ignored.
                    spec:
                      type: object
                      description: Spec is the specification of the service.
                      properties:
                        type:
                          type: string
                          description: 'type determines how the Service is exposed.
                            Defaults to ClusterIP. Valid options are ExternalName,
                            ClusterIP, NodePort, and LoadBalancer. "ExternalName"
                            maps to the specified externalName. "ClusterIP" allocates
                            a cluster-internal IP address for load-balancing to endpoints.
                            Endpoints are determined by the selector or if that is
                            not specified, by manual construction of an Endpoints
                            object. If clusterIP is "None", no virtual IP is allocated
                            and the endpoints are published as a set of endpoints
                            rather than a stable IP. "NodePort" builds on ClusterIP
                            and allocates a port on every node which routes to the
                            clusterIP. "LoadBalancer" builds on NodePort and creates
                            an external load-balancer (if supported in the current
                            cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                        selector:
                          type: object
                          additionalProperties:
                            type: string
                          description: 'Route service traffic to pods with label keys
                            and values matching this selector. If empty or not present,
                            the service is assumed to have an external process managing
                            its endpoints, which Kubernetes will not modify. Only
                            applies to types ClusterIP, NodePort, and LoadBalancer.
                            Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                        ports:
                          type: array
                          description: 'The list of ports that are exposed by this
                            service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                          items:
                            type: object
                            description: ServicePort contains information on service's
                              port.
                            properties:
                              name:
                                type: string
                                description: The name of this port within the service.
                                  This must be a DNS_LABEL. All ports within a ServiceSpec
                                  must have unique names. When considering the endpoints
                                  for a Service, this must match the 'name' field
                                  in the EndpointPort. Optional if only one ServicePort
                                  is defined on this service.
                              protocol:
                                type: string
                                description: The IP protocol for this port. Supports
                                  "TCP", "UDP", and "SCTP". Default is TCP.
                              port:
                                type: integer
                                description: The port that will be exposed by this
                                  service.
                                format: int32
                              targetPort:
                                anyOf:
                                  - type: integer
                                  - type: string
                                description: 'Number or name of the port to access
                                  on the pods targeted by the service. Number must
                                  be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                  If this is a string, it will be looked up as a named
                                  port in the target Pod''s container ports. If this
                                  is not specified, the value of the ''port'' field
                                  is used (an identity map). This field is ignored
                                  for services with clusterIP=None, and should be
                                  omitted or set equal to the ''port'' field. More
                                  info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                              nodePort:
                                type: integer
                                description: 'The port on each node on which this
                                  service is exposed when type=NodePort or LoadBalancer.
                                  Usually assigned by the system. If specified, it
                                  will be allocated to the service if unused or else
                                  creation of the service will fail. Default is to
                                  auto-allocate a port if the ServiceType of this
                                  Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                format: int32
                            required:
                              - port
                        clusterIP:
                          type: string
                          description: 'clusterIP is the IP address of the service
                            and is usually assigned randomly by the master. If an
                            address is specified manually and is not in use by others,
                            it will be allocated to the service; otherwise, creation
                            of the service will fail. This field can not be changed
                            through updates. Valid values are "None", empty string
                            (""), or a valid IP address. "None" can be specified for
                            headless services when proxying is not required. Only
                            applies to types ClusterIP, NodePort, and LoadBalancer.
                            Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                        externalIPs:
                          type: array
                          description: externalIPs is a list of IP addresses for which
                            nodes in the cluster will also accept traffic for this
                            service.  These IPs are not managed by Kubernetes.  The
                            user is responsible for ensuring that traffic arrives
                            at a node with this IP.  A common example is external
                            load-balancers that are not part of the Kubernetes system.
                          items:
                            type: string
                        loadBalancerIP:
                          type: string
                          description: 'Only applies to Service Type: LoadBalancer
                            LoadBalancer will get created with the IP specified in
                            this field. This feature depends on whether the underlying
                            cloud-provider supports specifying the loadBalancerIP
                            when a load balancer is created. This field will be ignored
                            if the cloud-provider does not support the feature.'
                        loadBalancerSourceRanges:
                          type: array
                          description: 'If specified and supported by the platform,
                            this will restrict traffic through the cloud-provider
                            load-balancer will be restricted to the specified client
                            IPs. This field will be ignored if the cloud-provider
                            does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                          items:
                            type: string
                        externalName:
                          type: string
                          description: externalName is the external reference that
                            kubedns or equivalent will return as a CNAME record for
                            this service. No proxying will be involved. Must be a
                            valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123)
                            and requires Type to be ExternalName.
                        externalTrafficPolicy:
                          type: string
                          description: externalTrafficPolicy denotes if this Service
                            desires to route external traffic to node-local or cluster-wide
                            endpoints. "Local" preserves the client source IP and
                            avoids a second hop for LoadBalancer and Nodeport type
                            services, but risks potentially imbalanced traffic spreading.
                            "Cluster" obscures the client source IP and may cause
                            a second hop to another node, but should have good overall
                            load-spreading.
                        sessionAffinity:
                          type: string
                          description: 'Supports "ClientIP" and "None". Used to maintain
                            session affinity. Enable client IP based session affinity.
                            Must be ClientIP or None. Defaults to None. More info:
                            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                        healthCheckNodePort:
                          type: integer
                          description: healthCheckNodePort specifies the healthcheck
                            nodePort for the service. If not specified, HealthCheckNodePort
                            is created by the service api backend with the allocated
                            nodePort. Will use user-specified nodePort value if specified
                            by the client. Only effects when Type is set to LoadBalancer
                            and ExternalTrafficPolicy is set to Local.
                          format: int32
                        ipFamily:
                          type: string
                          description: ipFamily specifies whether this Service has
                            a preference for a particular IP family (e.g. IPv4 vs.
                            IPv6).  If a specific IP family is requested, the clusterIP
                            field will be allocated from that family, if it is available
                            in the cluster.  If no IP family is requested, the cluster's
                            primary IP family will be used. Other IP fields (loadBalancerIP,
                            loadBalancerSourceRanges, externalIPs) and controllers
                            which allocate external load-balancers should use the
                            same IP family.  Endpoints for this Service will be of
                            this family.  This field is immutable after creation.
                            Assigning a ServiceIPFamily not available in the cluster
                            (e.g. IPv6 in IPv4 only cluster) is an error condition
                            and will fail during clusterIP assignment.
                        publishNotReadyAddresses:
                          type: boolean
                          description: publishNotReadyAddresses, when set to true,
                            indicates that DNS implementations must publish the notReadyAddresses
                            of subsets for the Endpoints associated with the Service.
                            The default value is false. The primary use case for setting
                            this field is to use a StatefulSet's Headless Service
                            to propagate SRV records for its Pods without respect
                            to their readiness for purpose of peer discovery.
                        sessionAffinityConfig:
                          type: object
                          description: sessionAffinityConfig contains the configurations
                            of session affinity.
                          properties:
                            clientIP:
                              type: object
                              description: clientIP contains the configurations of
                                Client IP based session affinity.
                              properties:
                                timeoutSeconds:
                                  type: integer
                                  description: timeoutSeconds specifies the seconds
                                    of ClientIP type session sticky time. The value
                                    must be >0 && <=86400(for 1 day) if ServiceAffinity
                                    == "ClientIP". Default value is 10800(for 3 hours).
                                  format: int32
                        topologyKeys:
                          type: array
                          description: topologyKeys is a preference-order list of
                            topology keys which implementations of services should
                            use to preferentially sort endpoints when accessing this
                            Service, it can not be used at the same time as externalTrafficPolicy=Local.
                            Topology keys must be valid label keys and at most 16
                            keys may be specified. Endpoints are chosen based on the
                            first topology key with available backends. If this field
                            is specified and all entries have no backends that match
                            the topology of the client, the service has no backends
                            for that client and connections should fail. The special
                            value "*" may be used to mean "any topology". This catch-all
                            value, if used, only makes sense as the last value in
                            the list. If this is not specified or empty, no topology
                            constraints will be applied.
                          items:
                            type: string
                tls:
                  type: object
                  description: TLS defines options for configuring TLS for HTTP.
                  properties:
                    certificate:
                      type: object
                      description: "Certificate is a reference to a Kubernetes secret
                        that contains the certificate and private key for enabling
                        TLS. The referenced secret should contain the following: \n
                        - `ca.crt`: The certificate authority (optional). - `tls.crt`:
                        The certificate (or a chain). - `tls.key`: The private key
                        to the first certificate in the certificate chain."
                      properties:
                        secretName:
                          type: string
                          description: SecretName is the name of the secret.
                    selfSignedCertificate:
                      type: object
                      description: SelfSignedCertificate allows configuring the self-signed
                        certificate generated by the operator.
                      properties:
                        disabled:
                          type: boolean
                          description: Disabled indicates that the provisioning of
                            the self-signed certifcate should be disabled.
                        subjectAltNames:
                          type: array
                          description: SubjectAlternativeNames is a list of SANs to
                            include in the generated HTTP TLS certificate.
                          items:
                            type: object
                            description: SubjectAlternativeName represents a SAN entry
                              in a x509 certificate.
                            properties:
                              dns:
                                type: string
                                description: DNS is the DNS name of the subject.
                              ip:
                                type: string
                                description: IP is the IP address of the subject.
            nodeSets:
              type: array
              description: NodeSets allow specifying groups of Elasticsearch nodes
                sharing the same configuration and Pod templates.
              items:
                type: object
                description: NodeSet is the specification for a group of Elasticsearch
                  nodes sharing the same configuration and a Pod template.
                properties:
                  name:
                    type: string
                    description: Name of this set of nodes. Becomes a part of the
                      Elasticsearch node.name setting.
                    maxLength: 23
                    pattern: '[a-zA-Z0-9-]+'
                  volumeClaimTemplates:
                    type: array
                    description: VolumeClaimTemplates is a list of persistent volume
                      claims to be used by each Pod in this NodeSet. Every claim in
                      this list must have a matching volumeMount in one of the containers
                      defined in the PodTemplate. Items defined here take precedence
                      over any default claims added by the operator with the same
                      name.
                    items:
                      type: object
                      description: PersistentVolumeClaim is a user's request for and
                        claim to a persistent volume
                      properties:
                        apiVersion:
                          type: string
                          description: 'APIVersion defines the versioned schema of
                            this representation of an object. Servers should convert
                            recognized schemas to the latest internal value, and may
                            reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        kind:
                          type: string
                          description: 'Kind is a string value representing the REST
                            resource this object represents. Servers may infer this
                            from the endpoint the client submits requests to. Cannot
                            be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        metadata:
                          type: object
                          description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                        spec:
                          type: object
                          description: 'Spec defines the desired characteristics of
                            a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                          properties:
                            selector:
                              type: object
                              description: A label query over volumes to consider
                                for binding.
                              properties:
                                matchExpressions:
                                  type: array
                                  description: matchExpressions is a list of label
                                    selector requirements. The requirements are ANDed.
                                  items:
                                    type: object
                                    description: A label selector requirement is a
                                      selector that contains values, a key, and an
                                      operator that relates the key and values.
                                    properties:
                                      key:
                                        type: string
                                        description: key is the label key that the
                                          selector applies to.
                                      operator:
                                        type: string
                                        description: operator represents a key's relationship
                                          to a set of values. Valid operators are
                                          In, NotIn, Exists and DoesNotExist.
                                      values:
                                        type: array
                                        description: values is an array of string
                                          values. If the operator is In or NotIn,
                                          the values array must be non-empty. If the
                                          operator is Exists or DoesNotExist, the
                                          values array must be empty. This array is
                                          replaced during a strategic merge patch.
                                        items:
                                          type: string
                                    required:
                                      - key
                                      - operator
                                matchLabels:
                                  type: object
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value}
                                    pairs. A single {key,value} in the matchLabels
                                    map is equivalent to an element of matchExpressions,
                                    whose key field is "key", the operator is "In",
                                    and the values array contains only "value". The
                                    requirements are ANDed.
                            resources:
                              type: object
                              description: 'Resources represents the minimum resources
                                the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                              properties:
                                limits:
                                  type: object
                                  additionalProperties:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  description: 'Limits describes the maximum amount
                                    of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                                requests:
                                  type: object
                                  additionalProperties:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  description: 'Requests describes the minimum amount
                                    of compute resources required. If Requests is
                                    omitted for a container, it defaults to Limits
                                    if that is explicitly specified, otherwise to
                                    an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                            accessModes:
                              type: array
                              description: 'AccessModes contains the desired access
                                modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                              items:
                                type: string
                            dataSource:
                              type: object
                              description: This field requires the VolumeSnapshotDataSource
                                alpha feature gate to be enabled and currently VolumeSnapshot
                                is the only supported data source. If the provisioner
                                can support VolumeSnapshot data source, it will create
                                a new volume and data will be restored to the volume
                                at the same time. If the provisioner does not support
                                VolumeSnapshot data source, volume will not be created
                                and the failure will be reported as an event. In the
                                future, we plan to support more data source types
                                and the behavior of the provisioner may change.
                              properties:
                                name:
                                  type: string
                                  description: Name is the name of resource being
                                    referenced
                                kind:
                                  type: string
                                  description: Kind is the type of resource being
                                    referenced
                                apiGroup:
                                  type: string
                                  description: APIGroup is the group for the resource
                                    being referenced. If APIGroup is not specified,
                                    the specified Kind must be in the core API group.
                                    For any other third-party types, APIGroup is required.
                              required:
                                - kind
                                - name
                            storageClassName:
                              type: string
                              description: 'Name of the StorageClass required by the
                                claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                            volumeMode:
                              type: string
                              description: volumeMode defines what type of volume
                                is required by the claim. Value of Filesystem is implied
                                when not included in claim spec. This is a beta feature.
                            volumeName:
                              type: string
                              description: VolumeName is the binding reference to
                                the PersistentVolume backing this claim.
                        status:
                          type: object
                          description: 'Status represents the current information/status
                            of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                          properties:
                            accessModes:
                              type: array
                              description: 'AccessModes contains the actual access
                                modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                              items:
                                type: string
                            capacity:
                              type: object
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              description: Represents the actual resources of the
                                underlying volume.
                            conditions:
                              type: array
                              description: Current Condition of persistent volume
                                claim. If underlying persistent volume is being resized
                                then the Condition will be set to 'ResizeStarted'.
                              items:
                                type: object
                                description: PersistentVolumeClaimCondition contails
                                  details about state of pvc
                                properties:
                                  type:
                                    type: string
                                    description: PersistentVolumeClaimConditionType
                                      is a valid value of PersistentVolumeClaimCondition.Type
                                  status:
                                    type: string
                                  lastProbeTime:
                                    type: string
                                    description: Last time we probed the condition.
                                    format: date-time
                                  lastTransitionTime:
                                    type: string
                                    description: Last time the condition transitioned
                                      from one status to another.
                                    format: date-time
                                  message:
                                    type: string
                                    description: Human-readable message indicating
                                      details about last transition.
                                  reason:
                                    type: string
                                    description: Unique, this should be a short, machine
                                      understandable string that gives the reason
                                      for condition's last transition. If it reports
                                      "ResizeStarted" that means the underlying persistent
                                      volume is being resized.
                                required:
                                  - status
                                  - type
                            phase:
                              type: string
                              description: Phase represents the current phase of PersistentVolumeClaim.
                  config:
                    type: object
                    description: Config holds the Elasticsearch configuration.
                  count:
                    type: integer
                    description: Count of Elasticsearch nodes to deploy.
                    format: int32
                    minimum: 1
                  podTemplate:
                    type: object
                    description: PodTemplate provides customisation options (labels,
                      annotations, affinity rules, resource requests, and so on) for
                      the Pods belonging to this NodeSet.
                required:
                  - count
                  - name
              minItems: 1
            podDisruptionBudget:
              type: object
              description: PodDisruptionBudget provides access to the default pod
                disruption budget for the Elasticsearch cluster. The default budget
                selects all cluster pods and sets `maxUnavailable` to 1. To disable,
                set `PodDisruptionBudget` to the empty value (`{}` in YAML).
              properties:
                metadata:
                  type: object
                  description: ObjectMeta is the metadata of the PDB. The name and
                    namespace provided here are managed by ECK and will be ignored.
                spec:
                  type: object
                  description: Spec is the specification of the PDB.
                  properties:
                    selector:
                      type: object
                      description: Label query over pods whose evictions are managed
                        by the disruption budget.
                      properties:
                        matchExpressions:
                          type: array
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            type: object
                            description: A label selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                type: string
                                description: key is the label key that the selector
                                  applies to.
                              operator:
                                type: string
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                              values:
                                type: array
                                description: values is an array of string values.
                                  If the operator is In or NotIn, the values array
                                  must be non-empty. If the operator is Exists or
                                  DoesNotExist, the values array must be empty. This
                                  array is replaced during a strategic merge patch.
                                items:
                                  type: string
                            required:
                              - key
                              - operator
                        matchLabels:
                          type: object
                          additionalProperties:
                            type: string
                          description: matchLabels is a map of {key,value} pairs.
                            A single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is
                            "key", the operator is "In", and the values array contains
                            only "value". The requirements are ANDed.
                    maxUnavailable:
                      anyOf:
                        - type: integer
                        - type: string
                      description: An eviction is allowed if at most "maxUnavailable"
                        pods selected by "selector" are unavailable after the eviction,
                        i.e. even in absence of the evicted pod. For example, one
                        can prevent all voluntary evictions by specifying 0. This
                        is a mutually exclusive setting with "minAvailable".
                    minAvailable:
                      anyOf:
                        - type: integer
                        - type: string
                      description: An eviction is allowed if at least "minAvailable"
                        pods selected by "selector" will still be available after
                        the eviction, i.e. even in the absence of the evicted pod.  So
                        for example you can prevent all voluntary evictions by specifying
                        "100%".
            remoteClusters:
              type: array
              description: RemoteClusters enables you to establish uni-directional
                connections to a remote Elasticsearch cluster.
              items:
                type: object
                description: RemoteCluster declares a remote Elasticsearch cluster
                  connection.
                properties:
                  name:
                    type: string
                    description: Name is the name of the remote cluster as it is set
                      in the Elasticsearch settings. The name is expected to be unique
                      for each remote clusters.
                    minLength: 1
                  elasticsearchRef:
                    type: object
                    description: ElasticsearchRef is a reference to an Elasticsearch
                      cluster running within the same k8s cluster.
                    properties:
                      name:
                        type: string
                        description: Name of the Kubernetes object.
                      namespace:
                        type: string
                        description: Namespace of the Kubernetes object. If empty,
                          defaults to the current namespace.
                    required:
                      - name
                required:
                  - name
            secureSettings:
              type: array
              description: SecureSettings is a list of references to Kubernetes secrets
                containing sensitive configuration options for Elasticsearch.
              items:
                type: object
                description: SecretSource defines a data source based on a Kubernetes
                  Secret.
                properties:
                  entries:
                    type: array
                    description: Entries define how to project each key-value pair
                      in the secret to filesystem paths. If not defined, all keys
                      will be projected to similarly named paths in the filesystem.
                      If defined, only the specified keys will be projected to the
                      corresponding paths.
                    items:
                      type: object
                      description: KeyToPath defines how to map a key in a Secret
                        object to a filesystem path.
                      properties:
                        key:
                          type: string
                          description: Key is the key contained in the secret.
                        path:
                          type: string
                          description: Path is the relative file path to map the key
                            to. Path must not be an absolute file path and must not
                            contain any ".." components.
                      required:
                        - key
                  secretName:
                    type: string
                    description: SecretName is the name of the secret.
                required:
                  - secretName
            transport:
              type: object
              description: Transport holds transport layer settings for Elasticsearch.
              properties:
                service:
                  type: object
                  description: Service defines the template for the associated Kubernetes
                    Service object.
                  properties:
                    metadata:
                      type: object
                      description: ObjectMeta is the metadata of the service. The
                        name and namespace provided here are managed by ECK and will
                        be ignored.
                    spec:
                      type: object
                      description: Spec is the specification of the service.
                      properties:
                        type:
                          type: string
                          description: 'type determines how the Service is exposed.
                            Defaults to ClusterIP. Valid options are ExternalName,
                            ClusterIP, NodePort, and LoadBalancer. "ExternalName"
                            maps to the specified externalName. "ClusterIP" allocates
                            a cluster-internal IP address for load-balancing to endpoints.
                            Endpoints are determined by the selector or if that is
                            not specified, by manual construction of an Endpoints
                            object. If clusterIP is "None", no virtual IP is allocated
                            and the endpoints are published as a set of endpoints
                            rather than a stable IP. "NodePort" builds on ClusterIP
                            and allocates a port on every node which routes to the
                            clusterIP. "LoadBalancer" builds on NodePort and creates
                            an external load-balancer (if supported in the current
                            cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                        selector:
                          type: object
                          additionalProperties:
                            type: string
                          description: 'Route service traffic to pods with label keys
                            and values matching this selector. If empty or not present,
                            the service is assumed to have an external process managing
                            its endpoints, which Kubernetes will not modify. Only
                            applies to types ClusterIP, NodePort, and LoadBalancer.
                            Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                        ports:
                          type: array
                          description: 'The list of ports that are exposed by this
                            service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                          items:
                            type: object
                            description: ServicePort contains information on service's
                              port.
                            properties:
                              name:
                                type: string
                                description: The name of this port within the service.
                                  This must be a DNS_LABEL. All ports within a ServiceSpec
                                  must have unique names. When considering the endpoints
                                  for a Service, this must match the 'name' field
                                  in the EndpointPort. Optional if only one ServicePort
                                  is defined on this service.
                              protocol:
                                type: string
                                description: The IP protocol for this port. Supports
                                  "TCP", "UDP", and "SCTP". Default is TCP.
                              port:
                                type: integer
                                description: The port that will be exposed by this
                                  service.
                                format: int32
                              targetPort:
                                anyOf:
                                  - type: integer
                                  - type: string
                                description: 'Number or name of the port to access
                                  on the pods targeted by the service. Number must
                                  be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                  If this is a string, it will be looked up as a named
                                  port in the target Pod''s container ports. If this
                                  is not specified, the value of the ''port'' field
                                  is used (an identity map). This field is ignored
                                  for services with clusterIP=None, and should be
                                  omitted or set equal to the ''port'' field. More
                                  info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                              nodePort:
                                type: integer
                                description: 'The port on each node on which this
                                  service is exposed when type=NodePort or LoadBalancer.
                                  Usually assigned by the system. If specified, it
                                  will be allocated to the service if unused or else
                                  creation of the service will fail. Default is to
                                  auto-allocate a port if the ServiceType of this
                                  Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                format: int32
                            required:
                              - port
                        clusterIP:
                          type: string
                          description: 'clusterIP is the IP address of the service
                            and is usually assigned randomly by the master. If an
                            address is specified manually and is not in use by others,
                            it will be allocated to the service; otherwise, creation
                            of the service will fail. This field can not be changed
                            through updates. Valid values are "None", empty string
                            (""), or a valid IP address. "None" can be specified for
                            headless services when proxying is not required. Only
                            applies to types ClusterIP, NodePort, and LoadBalancer.
                            Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                        externalIPs:
                          type: array
                          description: externalIPs is a list of IP addresses for which
                            nodes in the cluster will also accept traffic for this
                            service.  These IPs are not managed by Kubernetes.  The
                            user is responsible for ensuring that traffic arrives
                            at a node with this IP.  A common example is external
                            load-balancers that are not part of the Kubernetes system.
                          items:
                            type: string
                        loadBalancerIP:
                          type: string
                          description: 'Only applies to Service Type: LoadBalancer
                            LoadBalancer will get created with the IP specified in
                            this field. This feature depends on whether the underlying
                            cloud-provider supports specifying the loadBalancerIP
                            when a load balancer is created. This field will be ignored
                            if the cloud-provider does not support the feature.'
                        loadBalancerSourceRanges:
                          type: array
                          description: 'If specified and supported by the platform,
                            this will restrict traffic through the cloud-provider
                            load-balancer will be restricted to the specified client
                            IPs. This field will be ignored if the cloud-provider
                            does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                          items:
                            type: string
                        externalName:
                          type: string
                          description: externalName is the external reference that
                            kubedns or equivalent will return as a CNAME record for
                            this service. No proxying will be involved. Must be a
                            valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123)
                            and requires Type to be ExternalName.
                        externalTrafficPolicy:
                          type: string
                          description: externalTrafficPolicy denotes if this Service
                            desires to route external traffic to node-local or cluster-wide
                            endpoints. "Local" preserves the client source IP and
                            avoids a second hop for LoadBalancer and Nodeport type
                            services, but risks potentially imbalanced traffic spreading.
                            "Cluster" obscures the client source IP and may cause
                            a second hop to another node, but should have good overall
                            load-spreading.
                        sessionAffinity:
                          type: string
                          description: 'Supports "ClientIP" and "None". Used to maintain
                            session affinity. Enable client IP based session affinity.
                            Must be ClientIP or None. Defaults to None. More info:
                            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                        healthCheckNodePort:
                          type: integer
                          description: healthCheckNodePort specifies the healthcheck
                            nodePort for the service. If not specified, HealthCheckNodePort
                            is created by the service api backend with the allocated
                            nodePort. Will use user-specified nodePort value if specified
                            by the client. Only effects when Type is set to LoadBalancer
                            and ExternalTrafficPolicy is set to Local.
                          format: int32
                        ipFamily:
                          type: string
                          description: ipFamily specifies whether this Service has
                            a preference for a particular IP family (e.g. IPv4 vs.
                            IPv6).  If a specific IP family is requested, the clusterIP
                            field will be allocated from that family, if it is available
                            in the cluster.  If no IP family is requested, the cluster's
                            primary IP family will be used. Other IP fields (loadBalancerIP,
                            loadBalancerSourceRanges, externalIPs) and controllers
                            which allocate external load-balancers should use the
                            same IP family.  Endpoints for this Service will be of
                            this family.  This field is immutable after creation.
                            Assigning a ServiceIPFamily not available in the cluster
                            (e.g. IPv6 in IPv4 only cluster) is an error condition
                            and will fail during clusterIP assignment.
                        publishNotReadyAddresses:
                          type: boolean
                          description: publishNotReadyAddresses, when set to true,
                            indicates that DNS implementations must publish the notReadyAddresses
                            of subsets for the Endpoints associated with the Service.
                            The default value is false. The primary use case for setting
                            this field is to use a StatefulSet's Headless Service
                            to propagate SRV records for its Pods without respect
                            to their readiness for purpose of peer discovery.
                        sessionAffinityConfig:
                          type: object
                          description: sessionAffinityConfig contains the configurations
                            of session affinity.
                          properties:
                            clientIP:
                              type: object
                              description: clientIP contains the configurations of
                                Client IP based session affinity.
                              properties:
                                timeoutSeconds:
                                  type: integer
                                  description: timeoutSeconds specifies the seconds
                                    of ClientIP type session sticky time. The value
                                    must be >0 && <=86400(for 1 day) if ServiceAffinity
                                    == "ClientIP". Default value is 10800(for 3 hours).
                                  format: int32
                        topologyKeys:
                          type: array
                          description: topologyKeys is a preference-order list of
                            topology keys which implementations of services should
                            use to preferentially sort endpoints when accessing this
                            Service, it can not be used at the same time as externalTrafficPolicy=Local.
                            Topology keys must be valid label keys and at most 16
                            keys may be specified. Endpoints are chosen based on the
                            first topology key with available backends. If this field
                            is specified and all entries have no backends that match
                            the topology of the client, the service has no backends
                            for that client and connections should fail. The special
                            value "*" may be used to mean "any topology". This catch-all
                            value, if used, only makes sense as the last value in
                            the list. If this is not specified or empty, no topology
                            constraints will be applied.
                          items:
                            type: string
            version:
              type: string
              description: Version of Elasticsearch.
          required:
            - nodeSets
            - version
        status:
          type: object
          description: ElasticsearchStatus defines the observed state of Elasticsearch
          properties:
            availableNodes:
              type: integer
              format: int32
            health:
              type: string
              description: ElasticsearchHealth is the health of the cluster as returned
                by the health API.
            phase:
              type: string
              description: ElasticsearchOrchestrationPhase is the phase Elasticsearch
                is in from the controller point of view.
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
    - name: v1beta1
      served: true
      storage: false
    - name: v1alpha1
      served: false
      storage: false
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: enterprisesearches.enterprisesearch.k8s.elastic.co
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
spec:
  additionalPrinterColumns:
    - name: health
      type: string
      JSONPath: .status.health
    - name: nodes
      type: integer
      JSONPath: .status.availableNodes
      description: Available nodes
    - name: version
      type: string
      JSONPath: .spec.version
      description: Enterprise Search version
    - name: age
      type: date
      JSONPath: .metadata.creationTimestamp
  group: enterprisesearch.k8s.elastic.co
  names:
    kind: EnterpriseSearch
    categories:
      - elastic
    listKind: EnterpriseSearchList
    plural: enterprisesearches
    shortNames:
      - ent
    singular: enterprisesearch
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: EnterpriseSearch is a Kubernetes CRD to represent Enterprise Search.
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          type: object
        spec:
          type: object
          description: EnterpriseSearchSpec holds the specification of an Enterprise
            Search resource.
          properties:
            serviceAccountName:
              type: string
              description: ServiceAccountName is used to check access from the current
                resource to a resource (eg. Elasticsearch) in a different namespace.
                Can only be used if ECK is enforcing RBAC on references.
            image:
              type: string
              description: Image is the Enterprise Search Docker image to deploy.
            config:
              type: object
              description: Config holds the Enterprise Search configuration.
            configRef:
              type: object
              description: ConfigRef contains a reference to an existing Kubernetes
                Secret holding the Enterprise Search configuration. Configuration
                settings are merged and have precedence over settings specified in
                `config`.
              properties:
                secretName:
                  type: string
                  description: SecretName is the name of the secret.
            count:
              type: integer
              description: Count of Enterprise Search instances to deploy.
              format: int32
            elasticsearchRef:
              type: object
              description: ElasticsearchRef is a reference to the Elasticsearch cluster
                running in the same Kubernetes cluster.
              properties:
                name:
                  type: string
                  description: Name of the Kubernetes object.
                namespace:
                  type: string
                  description: Namespace of the Kubernetes object. If empty, defaults
                    to the current namespace.
              required:
                - name
            http:
              type: object
              description: HTTP holds the HTTP layer configuration for Enterprise
                Search resource.
              properties:
                service:
                  type: object
                  description: Service defines the template for the associated Kubernetes
                    Service object.
                  properties:
                    metadata:
                      type: object
                      description: ObjectMeta is the metadata of the service. The
                        name and namespace provided here are managed by ECK and will
                        be ignored.
                    spec:
                      type: object
                      description: Spec is the specification of the service.
                      properties:
                        type:
                          type: string
                          description: 'type determines how the Service is exposed.
                            Defaults to ClusterIP. Valid options are ExternalName,
                            ClusterIP, NodePort, and LoadBalancer. "ExternalName"
                            maps to the specified externalName. "ClusterIP" allocates
                            a cluster-internal IP address for load-balancing to endpoints.
                            Endpoints are determined by the selector or if that is
                            not specified, by manual construction of an Endpoints
                            object. If clusterIP is "None", no virtual IP is allocated
                            and the endpoints are published as a set of endpoints
                            rather than a stable IP. "NodePort" builds on ClusterIP
                            and allocates a port on every node which routes to the
                            clusterIP. "LoadBalancer" builds on NodePort and creates
                            an external load-balancer (if supported in the current
                            cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                        selector:
                          type: object
                          additionalProperties:
                            type: string
                          description: 'Route service traffic to pods with label keys
                            and values matching this selector. If empty or not present,
                            the service is assumed to have an external process managing
                            its endpoints, which Kubernetes will not modify. Only
                            applies to types ClusterIP, NodePort, and LoadBalancer.
                            Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                        ports:
                          type: array
                          description: 'The list of ports that are exposed by this
                            service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                          items:
                            type: object
                            description: ServicePort contains information on service's
                              port.
                            properties:
                              name:
                                type: string
                                description: The name of this port within the service.
                                  This must be a DNS_LABEL. All ports within a ServiceSpec
                                  must have unique names. When considering the endpoints
                                  for a Service, this must match the 'name' field
                                  in the EndpointPort. Optional if only one ServicePort
                                  is defined on this service.
                              protocol:
                                type: string
                                description: The IP protocol for this port. Supports
                                  "TCP", "UDP", and "SCTP". Default is TCP.
                              port:
                                type: integer
                                description: The port that will be exposed by this
                                  service.
                                format: int32
                              targetPort:
                                anyOf:
                                  - type: integer
                                  - type: string
                                description: 'Number or name of the port to access
                                  on the pods targeted by the service. Number must
                                  be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                  If this is a string, it will be looked up as a named
                                  port in the target Pod''s container ports. If this
                                  is not specified, the value of the ''port'' field
                                  is used (an identity map). This field is ignored
                                  for services with clusterIP=None, and should be
                                  omitted or set equal to the ''port'' field. More
                                  info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                              nodePort:
                                type: integer
                                description: 'The port on each node on which this
                                  service is exposed when type=NodePort or LoadBalancer.
                                  Usually assigned by the system. If specified, it
                                  will be allocated to the service if unused or else
                                  creation of the service will fail. Default is to
                                  auto-allocate a port if the ServiceType of this
                                  Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                format: int32
                            required:
                              - port
                        clusterIP:
                          type: string
                          description: 'clusterIP is the IP address of the service
                            and is usually assigned randomly by the master. If an
                            address is specified manually and is not in use by others,
                            it will be allocated to the service; otherwise, creation
                            of the service will fail. This field can not be changed
                            through updates. Valid values are "None", empty string
                            (""), or a valid IP address. "None" can be specified for
                            headless services when proxying is not required. Only
                            applies to types ClusterIP, NodePort, and LoadBalancer.
                            Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                        externalIPs:
                          type: array
                          description: externalIPs is a list of IP addresses for which
                            nodes in the cluster will also accept traffic for this
                            service.  These IPs are not managed by Kubernetes.  The
                            user is responsible for ensuring that traffic arrives
                            at a node with this IP.  A common example is external
                            load-balancers that are not part of the Kubernetes system.
                          items:
                            type: string
                        loadBalancerIP:
                          type: string
                          description: 'Only applies to Service Type: LoadBalancer
                            LoadBalancer will get created with the IP specified in
                            this field. This feature depends on whether the underlying
                            cloud-provider supports specifying the loadBalancerIP
                            when a load balancer is created. This field will be ignored
                            if the cloud-provider does not support the feature.'
                        loadBalancerSourceRanges:
                          type: array
                          description: 'If specified and supported by the platform,
                            this will restrict traffic through the cloud-provider
                            load-balancer will be restricted to the specified client
                            IPs. This field will be ignored if the cloud-provider
                            does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                          items:
                            type: string
                        externalName:
                          type: string
                          description: externalName is the external reference that
                            kubedns or equivalent will return as a CNAME record for
                            this service. No proxying will be involved. Must be a
                            valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123)
                            and requires Type to be ExternalName.
                        externalTrafficPolicy:
                          type: string
                          description: externalTrafficPolicy denotes if this Service
                            desires to route external traffic to node-local or cluster-wide
                            endpoints. "Local" preserves the client source IP and
                            avoids a second hop for LoadBalancer and Nodeport type
                            services, but risks potentially imbalanced traffic spreading.
                            "Cluster" obscures the client source IP and may cause
                            a second hop to another node, but should have good overall
                            load-spreading.
                        sessionAffinity:
                          type: string
                          description: 'Supports "ClientIP" and "None". Used to maintain
                            session affinity. Enable client IP based session affinity.
                            Must be ClientIP or None. Defaults to None. More info:
                            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                        healthCheckNodePort:
                          type: integer
                          description: healthCheckNodePort specifies the healthcheck
                            nodePort for the service. If not specified, HealthCheckNodePort
                            is created by the service api backend with the allocated
                            nodePort. Will use user-specified nodePort value if specified
                            by the client. Only effects when Type is set to LoadBalancer
                            and ExternalTrafficPolicy is set to Local.
                          format: int32
                        ipFamily:
                          type: string
                          description: ipFamily specifies whether this Service has
                            a preference for a particular IP family (e.g. IPv4 vs.
                            IPv6).  If a specific IP family is requested, the clusterIP
                            field will be allocated from that family, if it is available
                            in the cluster.  If no IP family is requested, the cluster's
                            primary IP family will be used. Other IP fields (loadBalancerIP,
                            loadBalancerSourceRanges, externalIPs) and controllers
                            which allocate external load-balancers should use the
                            same IP family.  Endpoints for this Service will be of
                            this family.  This field is immutable after creation.
                            Assigning a ServiceIPFamily not available in the cluster
                            (e.g. IPv6 in IPv4 only cluster) is an error condition
                            and will fail during clusterIP assignment.
                        publishNotReadyAddresses:
                          type: boolean
                          description: publishNotReadyAddresses, when set to true,
                            indicates that DNS implementations must publish the notReadyAddresses
                            of subsets for the Endpoints associated with the Service.
                            The default value is false. The primary use case for setting
                            this field is to use a StatefulSet's Headless Service
                            to propagate SRV records for its Pods without respect
                            to their readiness for purpose of peer discovery.
                        sessionAffinityConfig:
                          type: object
                          description: sessionAffinityConfig contains the configurations
                            of session affinity.
                          properties:
                            clientIP:
                              type: object
                              description: clientIP contains the configurations of
                                Client IP based session affinity.
                              properties:
                                timeoutSeconds:
                                  type: integer
                                  description: timeoutSeconds specifies the seconds
                                    of ClientIP type session sticky time. The value
                                    must be >0 && <=86400(for 1 day) if ServiceAffinity
                                    == "ClientIP". Default value is 10800(for 3 hours).
                                  format: int32
                        topologyKeys:
                          type: array
                          description: topologyKeys is a preference-order list of
                            topology keys which implementations of services should
                            use to preferentially sort endpoints when accessing this
                            Service, it can not be used at the same time as externalTrafficPolicy=Local.
                            Topology keys must be valid label keys and at most 16
                            keys may be specified. Endpoints are chosen based on the
                            first topology key with available backends. If this field
                            is specified and all entries have no backends that match
                            the topology of the client, the service has no backends
                            for that client and connections should fail. The special
                            value "*" may be used to mean "any topology". This catch-all
                            value, if used, only makes sense as the last value in
                            the list. If this is not specified or empty, no topology
                            constraints will be applied.
                          items:
                            type: string
                tls:
                  type: object
                  description: TLS defines options for configuring TLS for HTTP.
                  properties:
                    certificate:
                      type: object
                      description: "Certificate is a reference to a Kubernetes secret
                        that contains the certificate and private key for enabling
                        TLS. The referenced secret should contain the following: \n
                        - `ca.crt`: The certificate authority (optional). - `tls.crt`:
                        The certificate (or a chain). - `tls.key`: The private key
                        to the first certificate in the certificate chain."
                      properties:
                        secretName:
                          type: string
                          description: SecretName is the name of the secret.
                    selfSignedCertificate:
                      type: object
                      description: SelfSignedCertificate allows configuring the self-signed
                        certificate generated by the operator.
                      properties:
                        disabled:
                          type: boolean
                          description: Disabled indicates that the provisioning of
                            the self-signed certifcate should be disabled.
                        subjectAltNames:
                          type: array
                          description: SubjectAlternativeNames is a list of SANs to
                            include in the generated HTTP TLS certificate.
                          items:
                            type: object
                            description: SubjectAlternativeName represents a SAN entry
                              in a x509 certificate.
                            properties:
                              dns:
                                type: string
                                description: DNS is the DNS name of the subject.
                              ip:
                                type: string
                                description: IP is the IP address of the subject.
            podTemplate:
              type: object
              description: PodTemplate provides customisation options (labels, annotations,
                affinity rules, resource requests, and so on) for the Enterprise Search
                pods.
            version:
              type: string
              description: Version of Enterprise Search.
        status:
          type: object
          description: EnterpriseSearchStatus defines the observed state of EnterpriseSearch
          properties:
            service:
              type: string
              description: ExternalService is the name of the service associated to
                the Enterprise Search Pods.
            associationStatus:
              type: string
              description: Association is the status of any auto-linking to Elasticsearch
                clusters.
            availableNodes:
              type: integer
              format: int32
            health:
              type: string
              description: EnterpriseSearchHealth expresses the health of the Enterprise
                Search instances.
  version: v1beta1
  versions:
    - name: v1beta1
      served: true
      storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: kibanas.kibana.k8s.elastic.co
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
spec:
  additionalPrinterColumns:
    - name: health
      type: string
      JSONPath: .status.health
    - name: nodes
      type: integer
      JSONPath: .status.availableNodes
      description: Available nodes
    - name: version
      type: string
      JSONPath: .spec.version
      description: Kibana version
    - name: age
      type: date
      JSONPath: .metadata.creationTimestamp
  group: kibana.k8s.elastic.co
  names:
    kind: Kibana
    categories:
      - elastic
    listKind: KibanaList
    plural: kibanas
    shortNames:
      - kb
    singular: kibana
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: Kibana represents a Kibana resource in a Kubernetes cluster.
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          type: object
        spec:
          type: object
          description: KibanaSpec holds the specification of a Kibana instance.
          properties:
            serviceAccountName:
              type: string
              description: ServiceAccountName is used to check access from the current
                resource to a resource (eg. Elasticsearch) in a different namespace.
                Can only be used if ECK is enforcing RBAC on references.
            image:
              type: string
              description: Image is the Kibana Docker image to deploy.
            config:
              type: object
              description: 'Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html'
            count:
              type: integer
              description: Count of Kibana instances to deploy.
              format: int32
            elasticsearchRef:
              type: object
              description: ElasticsearchRef is a reference to an Elasticsearch cluster
                running in the same Kubernetes cluster.
              properties:
                name:
                  type: string
                  description: Name of the Kubernetes object.
                namespace:
                  type: string
                  description: Namespace of the Kubernetes object. If empty, defaults
                    to the current namespace.
              required:
                - name
            http:
              type: object
              description: HTTP holds the HTTP layer configuration for Kibana.
              properties:
                service:
                  type: object
                  description: Service defines the template for the associated Kubernetes
                    Service object.
                  properties:
                    metadata:
                      type: object
                      description: ObjectMeta is the metadata of the service. The
                        name and namespace provided here are managed by ECK and will
                        be ignored.
                    spec:
                      type: object
                      description: Spec is the specification of the service.
                      properties:
                        type:
                          type: string
                          description: 'type determines how the Service is exposed.
                            Defaults to ClusterIP. Valid options are ExternalName,
                            ClusterIP, NodePort, and LoadBalancer. "ExternalName"
                            maps to the specified externalName. "ClusterIP" allocates
                            a cluster-internal IP address for load-balancing to endpoints.
                            Endpoints are determined by the selector or if that is
                            not specified, by manual construction of an Endpoints
                            object. If clusterIP is "None", no virtual IP is allocated
                            and the endpoints are published as a set of endpoints
                            rather than a stable IP. "NodePort" builds on ClusterIP
                            and allocates a port on every node which routes to the
                            clusterIP. "LoadBalancer" builds on NodePort and creates
                            an external load-balancer (if supported in the current
                            cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                        selector:
                          type: object
                          additionalProperties:
                            type: string
                          description: 'Route service traffic to pods with label keys
                            and values matching this selector. If empty or not present,
                            the service is assumed to have an external process managing
                            its endpoints, which Kubernetes will not modify. Only
                            applies to types ClusterIP, NodePort, and LoadBalancer.
                            Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                        ports:
                          type: array
                          description: 'The list of ports that are exposed by this
                            service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                          items:
                            type: object
                            description: ServicePort contains information on service's
                              port.
                            properties:
                              name:
                                type: string
                                description: The name of this port within the service.
                                  This must be a DNS_LABEL. All ports within a ServiceSpec
                                  must have unique names. When considering the endpoints
                                  for a Service, this must match the 'name' field
                                  in the EndpointPort. Optional if only one ServicePort
                                  is defined on this service.
                              protocol:
                                type: string
                                description: The IP protocol for this port. Supports
                                  "TCP", "UDP", and "SCTP". Default is TCP.
                              port:
                                type: integer
                                description: The port that will be exposed by this
                                  service.
                                format: int32
                              targetPort:
                                anyOf:
                                  - type: integer
                                  - type: string
                                description: 'Number or name of the port to access
                                  on the pods targeted by the service. Number must
                                  be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                  If this is a string, it will be looked up as a named
                                  port in the target Pod''s container ports. If this
                                  is not specified, the value of the ''port'' field
                                  is used (an identity map). This field is ignored
                                  for services with clusterIP=None, and should be
                                  omitted or set equal to the ''port'' field. More
                                  info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                              nodePort:
                                type: integer
                                description: 'The port on each node on which this
                                  service is exposed when type=NodePort or LoadBalancer.
                                  Usually assigned by the system. If specified, it
                                  will be allocated to the service if unused or else
                                  creation of the service will fail. Default is to
                                  auto-allocate a port if the ServiceType of this
                                  Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                format: int32
                            required:
                              - port
                        clusterIP:
                          type: string
                          description: 'clusterIP is the IP address of the service
                            and is usually assigned randomly by the master. If an
                            address is specified manually and is not in use by others,
                            it will be allocated to the service; otherwise, creation
                            of the service will fail. This field can not be changed
                            through updates. Valid values are "None", empty string
                            (""), or a valid IP address. "None" can be specified for
                            headless services when proxying is not required. Only
                            applies to types ClusterIP, NodePort, and LoadBalancer.
                            Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                        externalIPs:
                          type: array
                          description: externalIPs is a list of IP addresses for which
                            nodes in the cluster will also accept traffic for this
                            service.  These IPs are not managed by Kubernetes.  The
                            user is responsible for ensuring that traffic arrives
                            at a node with this IP.  A common example is external
                            load-balancers that are not part of the Kubernetes system.
                          items:
                            type: string
                        loadBalancerIP:
                          type: string
                          description: 'Only applies to Service Type: LoadBalancer
                            LoadBalancer will get created with the IP specified in
                            this field. This feature depends on whether the underlying
                            cloud-provider supports specifying the loadBalancerIP
                            when a load balancer is created. This field will be ignored
                            if the cloud-provider does not support the feature.'
                        loadBalancerSourceRanges:
                          type: array
                          description: 'If specified and supported by the platform,
                            this will restrict traffic through the cloud-provider
                            load-balancer will be restricted to the specified client
                            IPs. This field will be ignored if the cloud-provider
                            does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/'
                          items:
                            type: string
                        externalName:
                          type: string
                          description: externalName is the external reference that
                            kubedns or equivalent will return as a CNAME record for
                            this service. No proxying will be involved. Must be a
                            valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123)
                            and requires Type to be ExternalName.
                        externalTrafficPolicy:
                          type: string
                          description: externalTrafficPolicy denotes if this Service
                            desires to route external traffic to node-local or cluster-wide
                            endpoints. "Local" preserves the client source IP and
                            avoids a second hop for LoadBalancer and Nodeport type
                            services, but risks potentially imbalanced traffic spreading.
                            "Cluster" obscures the client source IP and may cause
                            a second hop to another node, but should have good overall
                            load-spreading.
                        sessionAffinity:
                          type: string
                          description: 'Supports "ClientIP" and "None". Used to maintain
                            session affinity. Enable client IP based session affinity.
                            Must be ClientIP or None. Defaults to None. More info:
                            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                        healthCheckNodePort:
                          type: integer
                          description: healthCheckNodePort specifies the healthcheck
                            nodePort for the service. If not specified, HealthCheckNodePort
                            is created by the service api backend with the allocated
                            nodePort. Will use user-specified nodePort value if specified
                            by the client. Only effects when Type is set to LoadBalancer
                            and ExternalTrafficPolicy is set to Local.
                          format: int32
                        ipFamily:
                          type: string
                          description: ipFamily specifies whether this Service has
                            a preference for a particular IP family (e.g. IPv4 vs.
                            IPv6).  If a specific IP family is requested, the clusterIP
                            field will be allocated from that family, if it is available
                            in the cluster.  If no IP family is requested, the cluster's
                            primary IP family will be used. Other IP fields (loadBalancerIP,
                            loadBalancerSourceRanges, externalIPs) and controllers
                            which allocate external load-balancers should use the
                            same IP family.  Endpoints for this Service will be of
                            this family.  This field is immutable after creation.
                            Assigning a ServiceIPFamily not available in the cluster
                            (e.g. IPv6 in IPv4 only cluster) is an error condition
                            and will fail during clusterIP assignment.
                        publishNotReadyAddresses:
                          type: boolean
                          description: publishNotReadyAddresses, when set to true,
                            indicates that DNS implementations must publish the notReadyAddresses
                            of subsets for the Endpoints associated with the Service.
                            The default value is false. The primary use case for setting
                            this field is to use a StatefulSet's Headless Service
                            to propagate SRV records for its Pods without respect
                            to their readiness for purpose of peer discovery.
                        sessionAffinityConfig:
                          type: object
                          description: sessionAffinityConfig contains the configurations
                            of session affinity.
                          properties:
                            clientIP:
                              type: object
                              description: clientIP contains the configurations of
                                Client IP based session affinity.
                              properties:
                                timeoutSeconds:
                                  type: integer
                                  description: timeoutSeconds specifies the seconds
                                    of ClientIP type session sticky time. The value
                                    must be >0 && <=86400(for 1 day) if ServiceAffinity
                                    == "ClientIP". Default value is 10800(for 3 hours).
                                  format: int32
                        topologyKeys:
                          type: array
                          description: topologyKeys is a preference-order list of
                            topology keys which implementations of services should
                            use to preferentially sort endpoints when accessing this
                            Service, it can not be used at the same time as externalTrafficPolicy=Local.
                            Topology keys must be valid label keys and at most 16
                            keys may be specified. Endpoints are chosen based on the
                            first topology key with available backends. If this field
                            is specified and all entries have no backends that match
                            the topology of the client, the service has no backends
                            for that client and connections should fail. The special
                            value "*" may be used to mean "any topology". This catch-all
                            value, if used, only makes sense as the last value in
                            the list. If this is not specified or empty, no topology
                            constraints will be applied.
                          items:
                            type: string
                tls:
                  type: object
                  description: TLS defines options for configuring TLS for HTTP.
                  properties:
                    certificate:
                      type: object
                      description: "Certificate is a reference to a Kubernetes secret
                        that contains the certificate and private key for enabling
                        TLS. The referenced secret should contain the following: \n
                        - `ca.crt`: The certificate authority (optional). - `tls.crt`:
                        The certificate (or a chain). - `tls.key`: The private key
                        to the first certificate in the certificate chain."
                      properties:
                        secretName:
                          type: string
                          description: SecretName is the name of the secret.
                    selfSignedCertificate:
                      type: object
                      description: SelfSignedCertificate allows configuring the self-signed
                        certificate generated by the operator.
                      properties:
                        disabled:
                          type: boolean
                          description: Disabled indicates that the provisioning of
                            the self-signed certifcate should be disabled.
                        subjectAltNames:
                          type: array
                          description: SubjectAlternativeNames is a list of SANs to
                            include in the generated HTTP TLS certificate.
                          items:
                            type: object
                            description: SubjectAlternativeName represents a SAN entry
                              in a x509 certificate.
                            properties:
                              dns:
                                type: string
                                description: DNS is the DNS name of the subject.
                              ip:
                                type: string
                                description: IP is the IP address of the subject.
            podTemplate:
              type: object
              description: PodTemplate provides customisation options (labels, annotations,
                affinity rules, resource requests, and so on) for the Kibana pods
            secureSettings:
              type: array
              description: SecureSettings is a list of references to Kubernetes secrets
                containing sensitive configuration options for Kibana.
              items:
                type: object
                description: SecretSource defines a data source based on a Kubernetes
                  Secret.
                properties:
                  entries:
                    type: array
                    description: Entries define how to project each key-value pair
                      in the secret to filesystem paths. If not defined, all keys
                      will be projected to similarly named paths in the filesystem.
                      If defined, only the specified keys will be projected to the
                      corresponding paths.
                    items:
                      type: object
                      description: KeyToPath defines how to map a key in a Secret
                        object to a filesystem path.
                      properties:
                        key:
                          type: string
                          description: Key is the key contained in the secret.
                        path:
                          type: string
                          description: Path is the relative file path to map the key
                            to. Path must not be an absolute file path and must not
                            contain any ".." components.
                      required:
                        - key
                  secretName:
                    type: string
                    description: SecretName is the name of the secret.
                required:
                  - secretName
            version:
              type: string
              description: Version of Kibana.
          required:
            - version
        status:
          type: object
          description: KibanaStatus defines the observed state of Kibana
          properties:
            associationStatus:
              type: string
              description: AssociationStatus is the status of an association resource.
            availableNodes:
              type: integer
              format: int32
            health:
              type: string
              description: KibanaHealth expresses the status of the Kibana instances.
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
    - name: v1beta1
      served: true
      storage: false
    - name: v1alpha1
      served: false
      storage: false
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []